/*! \mainpage Práctica 3 ED

# Introducción

Autores: Alonso Doña Martínez y Jose Ramón Plaza Plaza

Implementación de 4 TDA Bag, Dictionary, letters_bag,letters_set que permitirán
realizar una serie de actividades a partir de letras.

# Ejecutables

# Clase Bag

Este TDA abstracto nos permite trabajar con una colección de elementos que
permite la extracción de elementos de forma aleatoria sin reemplazamiento 

Función de abstracción = fA:mochila--->{mochila.v[0] + mochila.v[1] + ...mochila.v[size]}

Invariante de la representación = Se cumple siempre que [ mochila.v[n], n<mochila.v.size() ]; 

Los métodos implementados en esta clase son los siguientes:

##Bag()

@brief Constructor de copia. Crea una copia exacta de otro objeto de tipo Bag

##Bag(const Bag<T> & other)

Constructor de copia, inicializa una instancia de Bag según la instancia pasada
por argumento.
@param other instancia base de la que se va a realizar la copia.


##add (const T & element)

@brief Método para añadir elementos a la bolsa
@param  const T & element elemento a añadir


##T get();

@brief Método para extraer un elemento aleatorio de la bolsa. Devuelve un elemento
@brief aleatorio de la bolsa y lo elimina de la misma.
@return Elemento de tipo T extraído de la bolsa
@pre La bolsa no está vacía
@post El elemento devuelto se ha eliminado de la bolsa

## clear()

@brief Elimina todos los elementos de la bolsa.

## size()

@brief Devuelve el número de elementos contenido en el vector.
@return Número de elementos que hay en la bolsa.

## empty()

@brief Comprueba si la bolsa está vacía.
@return true si la bolsa está vacía, false en caso contrario.

##operator =

@brief Sobrecarga del operador de asignación.
@param other Bag<T> a copiar.
@return Referencia a this para poder encadenar el operador.

# Clase Dictionary

Este TDA nos permitirá mantener en nuestro programa un conjunto de palabras.
Esta estructura nos permite almacenar strings.

Los elementos están ordenados alfabéticamente y no se repiten.

Función de abstracción = fA:diccionario--->{diccionario.words[0] + diccionario.words[1] + ...diccionario.words[size]}

Invariante de la representación = Se cumple siempre que [ diccionario.words[n], n<diccionario.words.size() ]; 
Además todo instancia del TDA diccionario debe cumplir que diccionario.words[x]!=diccionario.words[y]
Por último todos los valores almacenados deben cumplir el orden establecido.

Los métodos implementados en esta clase son los siguientes:

## Dictionary()

@brief Constructor por defecto que crea un Diccionario vacío.

## Dictionary(const Dictionary & other)

@brief Indica si una palabra está en el diccionario.
@param val La palabra que se busca si existe.
@return un bool que indica si la palabra existe o no.

## exists(const string & val) const

@brief Indica si una palabra está en el diccionario.
@param val La palabra que se busca si existe.
@return un bool que indica si la palabra existe o no.


## insert(const string & val)

@brief Inserta una palabra en el diccionario.
@param val Palabra que se inserta en el diccionario.
@return un bool que indica si se ha realizado bien la inserción.

## erase(const string & val)

@brief Elimina una plabra en el diccionario.
@param val Palabra que se borra edel diccionario
@return bool que indica si se ha borrado la palabra

## clear()

@brief Borra el diccionario.
@brief Elimina todas las palabras del diccionario.

## empty()

@brief Comprueba si esta vacío el diccionario
@return bool que indica si el diccionario está vcío.

## size() const

@brief Tamaño del diccionario.
@return Tamaño del diccionario(Palabras que hay en él).

## getOcurrences (const char c)

@brief Indica el número de aparaciones de una letra.
@param c Letra que se buscará.
@return múmero entero con el número de apariciones.

## gettotallLertters()

@brief Cuenta el total de letras del diccionario.
@return Entero con el total de letras.

## wordsOfLength(int length)

@brief Devuelve las palabras en el diccionario con la longitud dada.
@param length Longitud de las palabras.
@return Vector de palabras con la longitud pasada como parámetro.

# Clase LettersBag

Este TDA almacena un conjunto de chars utilizado en el juego de letras.
La estructura de datos subyacente es una lista de chars.

Función de abstracción = fA:bolsaletras--->{bolsaletras.letters[0] + bolsaletras.letters[1] + ...bolsaletras.letters[size]}

Invariante de la representación = Se cumple siempre que [ bolsaletras.letters[n], n<bolsaletras.letters.size() ]; 

Los métodos implementados en esta clase son los siguientes:

## LettersBag()

@brief Constructor sin argumento para inicializar instancias de la clase Bag

## LettersBag(const LetterSet & letterSet)

@brief Constructor dado un LetterSet, este constructor debe rellenar
la LettersBag con las letras contenidas en LettersSet, introduciendo 
cada letra el número de veces indicando por el campo LetterInfo::repetitions
@param const LetterSet & letterSet

## insertLetter(const char & l)

@brief Introduce una letra en la bolsa
@param l letra a añadir a la LettersBag

## extractLetter()

@brief Extrae una letra aleatoria de la bolsa, eliminándola del conjunto
@return char representa la letra

## extractLetters(int num)

@brief Extrae un conjunto de letras, eliminándolas del conjunto
@param num Número de letras a extraer
@return Lista con las letras extraídas

## clear()

@brief Elimina todo el contenido de la LettersBag

## size()

@brief Tamaño de la bolsa
@return entero con el tamaño de la bolsa

## operator=(const LettersBag & other)

@brief Sobrecarga del operador de asignación
@return Referencia a this de esta forma el operador puede ser encadenado

# Clase LetterSet

Este TDA representa un conjunto de letras, con la información necesaria para
jugar una partida al juego de las letras, es decir, el número de repeticiones
que tenemos de la letra y la puntuación que dicha letra otorga cuando se
utiliza en una palabra

Función de abstracción = fA:letterset--->{letterset.letters[0] + letterset.letters[1] + letterset.letters[letters.size()]

Invariante de representación : No pueden tener dos elementos la misma clave: No puede ocurrir que --> letterset.letters[a][LetterInfo x] + letterset.letters[a][LetterInfo y] 
Además debe estar ordenado según su clave.
Por último se puede acceder directamente al valor de una clave pero no al reves: 
letterset.letters[key_1] CORRECTO
letterset.letters[value_6] INCORRECTO

## Struct LetterInfo

Contiene información sobre un determinado carácter del juego de las
letras. En concreto, almacena información sobre el número de repeticiones de
la letra en la partida y de la puntuación que otorga al utilizarse en una
palabra

Los métodos implementados en esta clase son los siguientes:

## LetterSet()

@brief Constructor por defecto que crea un LetterSet vacío.

## LetterSet(const LetterSet & other)

@brief Constructor de copia que crea un LetterSet igual que el pasado como argumento.
@param other LetterSet explicito del que se copia el implicito.

## insert(const pair<char,LetterInfo> & val)

@brief Inserta un elemento en el LetterSet.
@param val Pareja de una letra y Letterinfo que se inserta
@return un bool que indica si se ha realizado bien la inserción.

## erase(const char & key)

@brief Elimina un acracter del LetterSet.
@param val Caracter que se elimina.
@return bool que indica si se ha borrado la palabra.

## clear()

@brief Borra el contenido de LetterSet.

## size()

@brief Tamaño del LetterSet.
@return Tamaño del LetterSet(elementos que hay en él).

## empty()

@brief Comprueba si esta vacío el LetterSet.
@return bool que indica si el letterSet está vcío.

## getScore(string word)

@brief Calcula la puntuacíon de la plaabra
@param word palabra de la cual queremos calcular la puntuación.
@return Puntuación de la palabra.

## operator=(const LetterSet & cl)

@brief sobra carga del operador de asignación.
@param cl Letterset que se copia.
@return Referencia alobjeto implicito.

## operator[](const char & val)

@brief Sobrecarga del operador corchete.
@brief Accede a los elementos del del map.
@param val Caracter a consultar.
@return Letterinfo con la información del caracter.

## operator<<(ostream & os, const LetterSet & cl)

@brief Sobrecarga del operador de salida.
@param os flujo de salida.
@param cl LetterSet que se manda al flujo de salida.
@return flujo de salida.

## operator>>(istream & is, LetterSet & cl)

@brief Sobrecarga del operador de entrada.
@param is flujo de entrada.
@param cl LetterSet que se almacena en el flujo de entrada.
@return flujo de entrada.

## getLetter() const

@brief Devuelve el atributo privado mapa.
@return Atributo privado map.